<?php
/**
 * Copyright (c) 2017 - present
 * LaravelGoogleRecaptcha - ReCaptchaTest.php
 * author: Roberto Belotti - roby.belotti@gmail.com
 * web : robertobelotti.com, github.com/biscolab
 * Initial version created on: 12/9/2018
 * MIT license: https://github.com/biscolab/laravel-recaptcha/blob/master/LICENSE
 */

namespace Biscolab\ReCaptcha\Tests;

use Biscolab\ReCaptcha\Facades\ReCaptcha;
use Biscolab\ReCaptcha\ReCaptchaBuilderInvisible;
use Biscolab\ReCaptcha\ReCaptchaBuilderV2;

/**
 * Class ReCaptchaTest
 * @package Biscolab\ReCaptcha\Tests
 */
class ReCaptchaTest extends TestCase {

    protected $recaptcha_invisible = null;

    protected $recaptcha_v2        = null;

    /**
     * @tests
     */
    public function testHtmlScriptTagJsApiGetHtmlScriptTag() {

        $r = ReCaptcha::htmlScriptTagJsApi();
        $this->assertEquals('<script src=\'https://www.google.com/recaptcha/api.js\' async defer></script>', $r);
    }

    /**
     * @test
     */
    public function testReCaptchaInvisibleHtmlFormButtonDefault() {

        $recaptcha = $this->recaptcha_invisible;
        $html_button = $recaptcha->htmlFormButton();
        $this->assertEquals('<button class="g-recaptcha" data-sitekey="api_site_key" data-callback="biscolabLaravelReCaptcha">Submit</button>', $html_button);
    }

    /**
     * @test
     */
    public function testReCaptchaInvisibleHtmlFormButtonCustom() {

        $recaptcha = $this->recaptcha_invisible;
        $html_button = $recaptcha->htmlFormButton('Custom Text');
        $this->assertEquals('<button class="g-recaptcha" data-sitekey="api_site_key" data-callback="biscolabLaravelReCaptcha">Custom Text</button>', $html_button);
    }

    /**
     * @test
     */
    public function testReCaptchaV2HtmlFormSnippet() {

        $recaptcha = $this->recaptcha_v2;
        $html_snippet = $recaptcha->htmlFormSnippet();
        $this->assertEquals('<div class="g-recaptcha" data-sitekey="api_site_key"></div>', $html_snippet);
    }

    /**
     * @test
     * @expectedException     \Error
     */
    public function testReCaptchaInvisibleHtmlFormSnippetShouldThrowError() {

        $this->recaptcha_invisible->htmlFormSnippet();
    }

    /**
     * @test
     * @expectedException     \Error
     */
    public function testReCaptchaV2htmlFormButtonShouldThrowError() {

        $this->recaptcha_v2->htmlFormButton();
    }

    protected function setUp() {

        parent::setUp(); // TODO: Change the autogenerated stub

        $this->recaptcha_invisible = new ReCaptchaBuilderInvisible('api_site_key', 'api_secret_key', 'invisible');
        $this->recaptcha_v2 = new ReCaptchaBuilderV2('api_site_key', 'api_secret_key');

    }
}